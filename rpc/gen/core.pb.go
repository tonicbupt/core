// Code generated by protoc-gen-go.
// source: core.proto
// DO NOT EDIT!

/*
Package pb is a generated protocol buffer package.

It is generated from these files:
	core.proto

It has these top-level messages:
	Empty
	Pod
	Pods
	Node
	Nodes
	NodeNames
	Container
	Containers
	ContainerID
	ContainerIDs
	AddPodOptions
	GetPodOptions
	AddNodeOptions
	GetNodeOptions
	ListNodesOptions
	BuildImageOptions
	DeployOptions
	UpgradeOptions
	RemoveImageOptions
	ErrorDetail
	BuildImageMessage
	CreateContainerMessage
	RemoveImageMessage
	RemoveContainerMessage
	UpgradeContainerMessage
*/
package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Empty struct {
}

func (m *Empty) Reset()                    { *m = Empty{} }
func (m *Empty) String() string            { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()               {}
func (*Empty) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

// 对的, protobuf 就是这样...
type Pod struct {
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Desc string `protobuf:"bytes,2,opt,name=desc" json:"desc,omitempty"`
}

func (m *Pod) Reset()                    { *m = Pod{} }
func (m *Pod) String() string            { return proto.CompactTextString(m) }
func (*Pod) ProtoMessage()               {}
func (*Pod) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type Pods struct {
	Pods []*Pod `protobuf:"bytes,1,rep,name=pods" json:"pods,omitempty"`
}

func (m *Pods) Reset()                    { *m = Pods{} }
func (m *Pods) String() string            { return proto.CompactTextString(m) }
func (*Pods) ProtoMessage()               {}
func (*Pods) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Pods) GetPods() []*Pod {
	if m != nil {
		return m.Pods
	}
	return nil
}

type Node struct {
	Name     string           `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Endpoint string           `protobuf:"bytes,2,opt,name=endpoint" json:"endpoint,omitempty"`
	Podname  string           `protobuf:"bytes,3,opt,name=podname" json:"podname,omitempty"`
	Public   bool             `protobuf:"varint,4,opt,name=public" json:"public,omitempty"`
	Cpu      map[string]int64 `protobuf:"bytes,5,rep,name=cpu" json:"cpu,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	Info     string           `protobuf:"bytes,6,opt,name=info" json:"info,omitempty"`
}

func (m *Node) Reset()                    { *m = Node{} }
func (m *Node) String() string            { return proto.CompactTextString(m) }
func (*Node) ProtoMessage()               {}
func (*Node) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *Node) GetCpu() map[string]int64 {
	if m != nil {
		return m.Cpu
	}
	return nil
}

type Nodes struct {
	Nodes []*Node `protobuf:"bytes,1,rep,name=nodes" json:"nodes,omitempty"`
}

func (m *Nodes) Reset()                    { *m = Nodes{} }
func (m *Nodes) String() string            { return proto.CompactTextString(m) }
func (*Nodes) ProtoMessage()               {}
func (*Nodes) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *Nodes) GetNodes() []*Node {
	if m != nil {
		return m.Nodes
	}
	return nil
}

type NodeNames struct {
	Names []string `protobuf:"bytes,1,rep,name=names" json:"names,omitempty"`
}

func (m *NodeNames) Reset()                    { *m = NodeNames{} }
func (m *NodeNames) String() string            { return proto.CompactTextString(m) }
func (*NodeNames) ProtoMessage()               {}
func (*NodeNames) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

type Container struct {
	Id       string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Podname  string `protobuf:"bytes,2,opt,name=podname" json:"podname,omitempty"`
	Nodename string `protobuf:"bytes,3,opt,name=nodename" json:"nodename,omitempty"`
	Name     string `protobuf:"bytes,4,opt,name=name" json:"name,omitempty"`
	Info     string `protobuf:"bytes,5,opt,name=info" json:"info,omitempty"`
}

func (m *Container) Reset()                    { *m = Container{} }
func (m *Container) String() string            { return proto.CompactTextString(m) }
func (*Container) ProtoMessage()               {}
func (*Container) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

type Containers struct {
	Containers []*Container `protobuf:"bytes,1,rep,name=containers" json:"containers,omitempty"`
}

func (m *Containers) Reset()                    { *m = Containers{} }
func (m *Containers) String() string            { return proto.CompactTextString(m) }
func (*Containers) ProtoMessage()               {}
func (*Containers) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *Containers) GetContainers() []*Container {
	if m != nil {
		return m.Containers
	}
	return nil
}

// protobuf 不允许基本类型做 message
// 只好把这样的类型也封装起来
type ContainerID struct {
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
}

func (m *ContainerID) Reset()                    { *m = ContainerID{} }
func (m *ContainerID) String() string            { return proto.CompactTextString(m) }
func (*ContainerID) ProtoMessage()               {}
func (*ContainerID) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

type ContainerIDs struct {
	Ids []*ContainerID `protobuf:"bytes,1,rep,name=ids" json:"ids,omitempty"`
}

func (m *ContainerIDs) Reset()                    { *m = ContainerIDs{} }
func (m *ContainerIDs) String() string            { return proto.CompactTextString(m) }
func (*ContainerIDs) ProtoMessage()               {}
func (*ContainerIDs) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *ContainerIDs) GetIds() []*ContainerID {
	if m != nil {
		return m.Ids
	}
	return nil
}

type AddPodOptions struct {
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Desc string `protobuf:"bytes,2,opt,name=desc" json:"desc,omitempty"`
}

func (m *AddPodOptions) Reset()                    { *m = AddPodOptions{} }
func (m *AddPodOptions) String() string            { return proto.CompactTextString(m) }
func (*AddPodOptions) ProtoMessage()               {}
func (*AddPodOptions) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

type GetPodOptions struct {
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
}

func (m *GetPodOptions) Reset()                    { *m = GetPodOptions{} }
func (m *GetPodOptions) String() string            { return proto.CompactTextString(m) }
func (*GetPodOptions) ProtoMessage()               {}
func (*GetPodOptions) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

type AddNodeOptions struct {
	Nodename string `protobuf:"bytes,1,opt,name=nodename" json:"nodename,omitempty"`
	Endpoint string `protobuf:"bytes,2,opt,name=endpoint" json:"endpoint,omitempty"`
	Podname  string `protobuf:"bytes,3,opt,name=podname" json:"podname,omitempty"`
	Cafile   string `protobuf:"bytes,4,opt,name=cafile" json:"cafile,omitempty"`
	Certfile string `protobuf:"bytes,5,opt,name=certfile" json:"certfile,omitempty"`
	Keyfile  string `protobuf:"bytes,6,opt,name=keyfile" json:"keyfile,omitempty"`
	Public   bool   `protobuf:"varint,7,opt,name=public" json:"public,omitempty"`
}

func (m *AddNodeOptions) Reset()                    { *m = AddNodeOptions{} }
func (m *AddNodeOptions) String() string            { return proto.CompactTextString(m) }
func (*AddNodeOptions) ProtoMessage()               {}
func (*AddNodeOptions) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

type GetNodeOptions struct {
	Podname  string `protobuf:"bytes,1,opt,name=podname" json:"podname,omitempty"`
	Nodename string `protobuf:"bytes,2,opt,name=nodename" json:"nodename,omitempty"`
}

func (m *GetNodeOptions) Reset()                    { *m = GetNodeOptions{} }
func (m *GetNodeOptions) String() string            { return proto.CompactTextString(m) }
func (*GetNodeOptions) ProtoMessage()               {}
func (*GetNodeOptions) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

type ListNodesOptions struct {
	Podname string `protobuf:"bytes,1,opt,name=podname" json:"podname,omitempty"`
}

func (m *ListNodesOptions) Reset()                    { *m = ListNodesOptions{} }
func (m *ListNodesOptions) String() string            { return proto.CompactTextString(m) }
func (*ListNodesOptions) ProtoMessage()               {}
func (*ListNodesOptions) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

type BuildImageOptions struct {
	Repo     string `protobuf:"bytes,1,opt,name=repo" json:"repo,omitempty"`
	Version  string `protobuf:"bytes,2,opt,name=version" json:"version,omitempty"`
	Uid      string `protobuf:"bytes,3,opt,name=uid" json:"uid,omitempty"`
	Artifact string `protobuf:"bytes,4,opt,name=artifact" json:"artifact,omitempty"`
}

func (m *BuildImageOptions) Reset()                    { *m = BuildImageOptions{} }
func (m *BuildImageOptions) String() string            { return proto.CompactTextString(m) }
func (*BuildImageOptions) ProtoMessage()               {}
func (*BuildImageOptions) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

type DeployOptions struct {
	Specs      string            `protobuf:"bytes,1,opt,name=specs" json:"specs,omitempty"`
	Appname    string            `protobuf:"bytes,2,opt,name=appname" json:"appname,omitempty"`
	Image      string            `protobuf:"bytes,3,opt,name=image" json:"image,omitempty"`
	Podname    string            `protobuf:"bytes,4,opt,name=podname" json:"podname,omitempty"`
	Nodename   string            `protobuf:"bytes,5,opt,name=nodename" json:"nodename,omitempty"`
	Entrypoint string            `protobuf:"bytes,6,opt,name=entrypoint" json:"entrypoint,omitempty"`
	CpuQuota   float64           `protobuf:"fixed64,7,opt,name=cpu_quota,json=cpuQuota" json:"cpu_quota,omitempty"`
	Count      int32             `protobuf:"varint,8,opt,name=count" json:"count,omitempty"`
	Memory     int64             `protobuf:"varint,9,opt,name=memory" json:"memory,omitempty"`
	Env        []string          `protobuf:"bytes,10,rep,name=env" json:"env,omitempty"`
	Networks   map[string]string `protobuf:"bytes,11,rep,name=networks" json:"networks,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Raw        bool              `protobuf:"varint,12,opt,name=raw" json:"raw,omitempty"`
}

func (m *DeployOptions) Reset()                    { *m = DeployOptions{} }
func (m *DeployOptions) String() string            { return proto.CompactTextString(m) }
func (*DeployOptions) ProtoMessage()               {}
func (*DeployOptions) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

func (m *DeployOptions) GetNetworks() map[string]string {
	if m != nil {
		return m.Networks
	}
	return nil
}

type UpgradeOptions struct {
	Ids   []*ContainerID `protobuf:"bytes,1,rep,name=ids" json:"ids,omitempty"`
	Image string         `protobuf:"bytes,2,opt,name=image" json:"image,omitempty"`
}

func (m *UpgradeOptions) Reset()                    { *m = UpgradeOptions{} }
func (m *UpgradeOptions) String() string            { return proto.CompactTextString(m) }
func (*UpgradeOptions) ProtoMessage()               {}
func (*UpgradeOptions) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

func (m *UpgradeOptions) GetIds() []*ContainerID {
	if m != nil {
		return m.Ids
	}
	return nil
}

type RemoveImageOptions struct {
	Podname  string   `protobuf:"bytes,1,opt,name=podname" json:"podname,omitempty"`
	Nodename string   `protobuf:"bytes,2,opt,name=nodename" json:"nodename,omitempty"`
	Images   []string `protobuf:"bytes,3,rep,name=images" json:"images,omitempty"`
}

func (m *RemoveImageOptions) Reset()                    { *m = RemoveImageOptions{} }
func (m *RemoveImageOptions) String() string            { return proto.CompactTextString(m) }
func (*RemoveImageOptions) ProtoMessage()               {}
func (*RemoveImageOptions) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{18} }

type ErrorDetail struct {
	Code    int64  `protobuf:"varint,1,opt,name=code" json:"code,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message" json:"message,omitempty"`
}

func (m *ErrorDetail) Reset()                    { *m = ErrorDetail{} }
func (m *ErrorDetail) String() string            { return proto.CompactTextString(m) }
func (*ErrorDetail) ProtoMessage()               {}
func (*ErrorDetail) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{19} }

type BuildImageMessage struct {
	Status      string       `protobuf:"bytes,1,opt,name=status" json:"status,omitempty"`
	Progress    string       `protobuf:"bytes,2,opt,name=progress" json:"progress,omitempty"`
	Error       string       `protobuf:"bytes,3,opt,name=error" json:"error,omitempty"`
	Stream      string       `protobuf:"bytes,4,opt,name=stream" json:"stream,omitempty"`
	ErrorDetail *ErrorDetail `protobuf:"bytes,5,opt,name=error_detail,json=errorDetail" json:"error_detail,omitempty"`
}

func (m *BuildImageMessage) Reset()                    { *m = BuildImageMessage{} }
func (m *BuildImageMessage) String() string            { return proto.CompactTextString(m) }
func (*BuildImageMessage) ProtoMessage()               {}
func (*BuildImageMessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{20} }

func (m *BuildImageMessage) GetErrorDetail() *ErrorDetail {
	if m != nil {
		return m.ErrorDetail
	}
	return nil
}

type CreateContainerMessage struct {
	Podname  string           `protobuf:"bytes,1,opt,name=podname" json:"podname,omitempty"`
	Nodename string           `protobuf:"bytes,2,opt,name=nodename" json:"nodename,omitempty"`
	Id       string           `protobuf:"bytes,3,opt,name=id" json:"id,omitempty"`
	Name     string           `protobuf:"bytes,4,opt,name=name" json:"name,omitempty"`
	Error    string           `protobuf:"bytes,5,opt,name=error" json:"error,omitempty"`
	Success  bool             `protobuf:"varint,6,opt,name=success" json:"success,omitempty"`
	Cpu      map[string]int64 `protobuf:"bytes,7,rep,name=cpu" json:"cpu,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
}

func (m *CreateContainerMessage) Reset()                    { *m = CreateContainerMessage{} }
func (m *CreateContainerMessage) String() string            { return proto.CompactTextString(m) }
func (*CreateContainerMessage) ProtoMessage()               {}
func (*CreateContainerMessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{21} }

func (m *CreateContainerMessage) GetCpu() map[string]int64 {
	if m != nil {
		return m.Cpu
	}
	return nil
}

type RemoveImageMessage struct {
	Image    string   `protobuf:"bytes,1,opt,name=image" json:"image,omitempty"`
	Success  bool     `protobuf:"varint,2,opt,name=success" json:"success,omitempty"`
	Messages []string `protobuf:"bytes,3,rep,name=messages" json:"messages,omitempty"`
}

func (m *RemoveImageMessage) Reset()                    { *m = RemoveImageMessage{} }
func (m *RemoveImageMessage) String() string            { return proto.CompactTextString(m) }
func (*RemoveImageMessage) ProtoMessage()               {}
func (*RemoveImageMessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{22} }

type RemoveContainerMessage struct {
	Id      string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Success bool   `protobuf:"varint,2,opt,name=success" json:"success,omitempty"`
	Message string `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
}

func (m *RemoveContainerMessage) Reset()                    { *m = RemoveContainerMessage{} }
func (m *RemoveContainerMessage) String() string            { return proto.CompactTextString(m) }
func (*RemoveContainerMessage) ProtoMessage()               {}
func (*RemoveContainerMessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{23} }

type UpgradeContainerMessage struct {
	Id      string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	NewId   string `protobuf:"bytes,2,opt,name=new_id,json=newId" json:"new_id,omitempty"`
	NewName string `protobuf:"bytes,3,opt,name=new_name,json=newName" json:"new_name,omitempty"`
	Error   string `protobuf:"bytes,4,opt,name=error" json:"error,omitempty"`
	Success bool   `protobuf:"varint,5,opt,name=success" json:"success,omitempty"`
}

func (m *UpgradeContainerMessage) Reset()                    { *m = UpgradeContainerMessage{} }
func (m *UpgradeContainerMessage) String() string            { return proto.CompactTextString(m) }
func (*UpgradeContainerMessage) ProtoMessage()               {}
func (*UpgradeContainerMessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{24} }

func init() {
	proto.RegisterType((*Empty)(nil), "pb.Empty")
	proto.RegisterType((*Pod)(nil), "pb.Pod")
	proto.RegisterType((*Pods)(nil), "pb.Pods")
	proto.RegisterType((*Node)(nil), "pb.Node")
	proto.RegisterType((*Nodes)(nil), "pb.Nodes")
	proto.RegisterType((*NodeNames)(nil), "pb.NodeNames")
	proto.RegisterType((*Container)(nil), "pb.Container")
	proto.RegisterType((*Containers)(nil), "pb.Containers")
	proto.RegisterType((*ContainerID)(nil), "pb.ContainerID")
	proto.RegisterType((*ContainerIDs)(nil), "pb.ContainerIDs")
	proto.RegisterType((*AddPodOptions)(nil), "pb.AddPodOptions")
	proto.RegisterType((*GetPodOptions)(nil), "pb.GetPodOptions")
	proto.RegisterType((*AddNodeOptions)(nil), "pb.AddNodeOptions")
	proto.RegisterType((*GetNodeOptions)(nil), "pb.GetNodeOptions")
	proto.RegisterType((*ListNodesOptions)(nil), "pb.ListNodesOptions")
	proto.RegisterType((*BuildImageOptions)(nil), "pb.BuildImageOptions")
	proto.RegisterType((*DeployOptions)(nil), "pb.DeployOptions")
	proto.RegisterType((*UpgradeOptions)(nil), "pb.UpgradeOptions")
	proto.RegisterType((*RemoveImageOptions)(nil), "pb.RemoveImageOptions")
	proto.RegisterType((*ErrorDetail)(nil), "pb.ErrorDetail")
	proto.RegisterType((*BuildImageMessage)(nil), "pb.BuildImageMessage")
	proto.RegisterType((*CreateContainerMessage)(nil), "pb.CreateContainerMessage")
	proto.RegisterType((*RemoveImageMessage)(nil), "pb.RemoveImageMessage")
	proto.RegisterType((*RemoveContainerMessage)(nil), "pb.RemoveContainerMessage")
	proto.RegisterType((*UpgradeContainerMessage)(nil), "pb.UpgradeContainerMessage")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion3

// Client API for CoreRPC service

type CoreRPCClient interface {
	ListPods(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Pods, error)
	AddPod(ctx context.Context, in *AddPodOptions, opts ...grpc.CallOption) (*Pod, error)
	GetPod(ctx context.Context, in *GetPodOptions, opts ...grpc.CallOption) (*Pod, error)
	AddNode(ctx context.Context, in *AddNodeOptions, opts ...grpc.CallOption) (*Node, error)
	GetNode(ctx context.Context, in *GetNodeOptions, opts ...grpc.CallOption) (*Node, error)
	ListPodNodes(ctx context.Context, in *ListNodesOptions, opts ...grpc.CallOption) (*Nodes, error)
	ListPodNodeNames(ctx context.Context, in *ListNodesOptions, opts ...grpc.CallOption) (*NodeNames, error)
	GetContainer(ctx context.Context, in *ContainerID, opts ...grpc.CallOption) (*Container, error)
	GetContainers(ctx context.Context, in *ContainerIDs, opts ...grpc.CallOption) (*Containers, error)
	BuildImage(ctx context.Context, in *BuildImageOptions, opts ...grpc.CallOption) (CoreRPC_BuildImageClient, error)
	CreateContainer(ctx context.Context, in *DeployOptions, opts ...grpc.CallOption) (CoreRPC_CreateContainerClient, error)
	UpgradeContainer(ctx context.Context, in *UpgradeOptions, opts ...grpc.CallOption) (CoreRPC_UpgradeContainerClient, error)
	RemoveContainer(ctx context.Context, in *ContainerIDs, opts ...grpc.CallOption) (CoreRPC_RemoveContainerClient, error)
	RemoveImage(ctx context.Context, in *RemoveImageOptions, opts ...grpc.CallOption) (CoreRPC_RemoveImageClient, error)
}

type coreRPCClient struct {
	cc *grpc.ClientConn
}

func NewCoreRPCClient(cc *grpc.ClientConn) CoreRPCClient {
	return &coreRPCClient{cc}
}

func (c *coreRPCClient) ListPods(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Pods, error) {
	out := new(Pods)
	err := grpc.Invoke(ctx, "/pb.CoreRPC/ListPods", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreRPCClient) AddPod(ctx context.Context, in *AddPodOptions, opts ...grpc.CallOption) (*Pod, error) {
	out := new(Pod)
	err := grpc.Invoke(ctx, "/pb.CoreRPC/AddPod", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreRPCClient) GetPod(ctx context.Context, in *GetPodOptions, opts ...grpc.CallOption) (*Pod, error) {
	out := new(Pod)
	err := grpc.Invoke(ctx, "/pb.CoreRPC/GetPod", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreRPCClient) AddNode(ctx context.Context, in *AddNodeOptions, opts ...grpc.CallOption) (*Node, error) {
	out := new(Node)
	err := grpc.Invoke(ctx, "/pb.CoreRPC/AddNode", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreRPCClient) GetNode(ctx context.Context, in *GetNodeOptions, opts ...grpc.CallOption) (*Node, error) {
	out := new(Node)
	err := grpc.Invoke(ctx, "/pb.CoreRPC/GetNode", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreRPCClient) ListPodNodes(ctx context.Context, in *ListNodesOptions, opts ...grpc.CallOption) (*Nodes, error) {
	out := new(Nodes)
	err := grpc.Invoke(ctx, "/pb.CoreRPC/ListPodNodes", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreRPCClient) ListPodNodeNames(ctx context.Context, in *ListNodesOptions, opts ...grpc.CallOption) (*NodeNames, error) {
	out := new(NodeNames)
	err := grpc.Invoke(ctx, "/pb.CoreRPC/ListPodNodeNames", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreRPCClient) GetContainer(ctx context.Context, in *ContainerID, opts ...grpc.CallOption) (*Container, error) {
	out := new(Container)
	err := grpc.Invoke(ctx, "/pb.CoreRPC/GetContainer", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreRPCClient) GetContainers(ctx context.Context, in *ContainerIDs, opts ...grpc.CallOption) (*Containers, error) {
	out := new(Containers)
	err := grpc.Invoke(ctx, "/pb.CoreRPC/GetContainers", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coreRPCClient) BuildImage(ctx context.Context, in *BuildImageOptions, opts ...grpc.CallOption) (CoreRPC_BuildImageClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_CoreRPC_serviceDesc.Streams[0], c.cc, "/pb.CoreRPC/BuildImage", opts...)
	if err != nil {
		return nil, err
	}
	x := &coreRPCBuildImageClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CoreRPC_BuildImageClient interface {
	Recv() (*BuildImageMessage, error)
	grpc.ClientStream
}

type coreRPCBuildImageClient struct {
	grpc.ClientStream
}

func (x *coreRPCBuildImageClient) Recv() (*BuildImageMessage, error) {
	m := new(BuildImageMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *coreRPCClient) CreateContainer(ctx context.Context, in *DeployOptions, opts ...grpc.CallOption) (CoreRPC_CreateContainerClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_CoreRPC_serviceDesc.Streams[1], c.cc, "/pb.CoreRPC/CreateContainer", opts...)
	if err != nil {
		return nil, err
	}
	x := &coreRPCCreateContainerClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CoreRPC_CreateContainerClient interface {
	Recv() (*CreateContainerMessage, error)
	grpc.ClientStream
}

type coreRPCCreateContainerClient struct {
	grpc.ClientStream
}

func (x *coreRPCCreateContainerClient) Recv() (*CreateContainerMessage, error) {
	m := new(CreateContainerMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *coreRPCClient) UpgradeContainer(ctx context.Context, in *UpgradeOptions, opts ...grpc.CallOption) (CoreRPC_UpgradeContainerClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_CoreRPC_serviceDesc.Streams[2], c.cc, "/pb.CoreRPC/UpgradeContainer", opts...)
	if err != nil {
		return nil, err
	}
	x := &coreRPCUpgradeContainerClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CoreRPC_UpgradeContainerClient interface {
	Recv() (*UpgradeContainerMessage, error)
	grpc.ClientStream
}

type coreRPCUpgradeContainerClient struct {
	grpc.ClientStream
}

func (x *coreRPCUpgradeContainerClient) Recv() (*UpgradeContainerMessage, error) {
	m := new(UpgradeContainerMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *coreRPCClient) RemoveContainer(ctx context.Context, in *ContainerIDs, opts ...grpc.CallOption) (CoreRPC_RemoveContainerClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_CoreRPC_serviceDesc.Streams[3], c.cc, "/pb.CoreRPC/RemoveContainer", opts...)
	if err != nil {
		return nil, err
	}
	x := &coreRPCRemoveContainerClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CoreRPC_RemoveContainerClient interface {
	Recv() (*RemoveContainerMessage, error)
	grpc.ClientStream
}

type coreRPCRemoveContainerClient struct {
	grpc.ClientStream
}

func (x *coreRPCRemoveContainerClient) Recv() (*RemoveContainerMessage, error) {
	m := new(RemoveContainerMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *coreRPCClient) RemoveImage(ctx context.Context, in *RemoveImageOptions, opts ...grpc.CallOption) (CoreRPC_RemoveImageClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_CoreRPC_serviceDesc.Streams[4], c.cc, "/pb.CoreRPC/RemoveImage", opts...)
	if err != nil {
		return nil, err
	}
	x := &coreRPCRemoveImageClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CoreRPC_RemoveImageClient interface {
	Recv() (*RemoveImageMessage, error)
	grpc.ClientStream
}

type coreRPCRemoveImageClient struct {
	grpc.ClientStream
}

func (x *coreRPCRemoveImageClient) Recv() (*RemoveImageMessage, error) {
	m := new(RemoveImageMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for CoreRPC service

type CoreRPCServer interface {
	ListPods(context.Context, *Empty) (*Pods, error)
	AddPod(context.Context, *AddPodOptions) (*Pod, error)
	GetPod(context.Context, *GetPodOptions) (*Pod, error)
	AddNode(context.Context, *AddNodeOptions) (*Node, error)
	GetNode(context.Context, *GetNodeOptions) (*Node, error)
	ListPodNodes(context.Context, *ListNodesOptions) (*Nodes, error)
	ListPodNodeNames(context.Context, *ListNodesOptions) (*NodeNames, error)
	GetContainer(context.Context, *ContainerID) (*Container, error)
	GetContainers(context.Context, *ContainerIDs) (*Containers, error)
	BuildImage(*BuildImageOptions, CoreRPC_BuildImageServer) error
	CreateContainer(*DeployOptions, CoreRPC_CreateContainerServer) error
	UpgradeContainer(*UpgradeOptions, CoreRPC_UpgradeContainerServer) error
	RemoveContainer(*ContainerIDs, CoreRPC_RemoveContainerServer) error
	RemoveImage(*RemoveImageOptions, CoreRPC_RemoveImageServer) error
}

func RegisterCoreRPCServer(s *grpc.Server, srv CoreRPCServer) {
	s.RegisterService(&_CoreRPC_serviceDesc, srv)
}

func _CoreRPC_ListPods_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreRPCServer).ListPods(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.CoreRPC/ListPods",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreRPCServer).ListPods(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoreRPC_AddPod_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddPodOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreRPCServer).AddPod(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.CoreRPC/AddPod",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreRPCServer).AddPod(ctx, req.(*AddPodOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoreRPC_GetPod_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPodOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreRPCServer).GetPod(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.CoreRPC/GetPod",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreRPCServer).GetPod(ctx, req.(*GetPodOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoreRPC_AddNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddNodeOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreRPCServer).AddNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.CoreRPC/AddNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreRPCServer).AddNode(ctx, req.(*AddNodeOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoreRPC_GetNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNodeOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreRPCServer).GetNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.CoreRPC/GetNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreRPCServer).GetNode(ctx, req.(*GetNodeOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoreRPC_ListPodNodes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListNodesOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreRPCServer).ListPodNodes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.CoreRPC/ListPodNodes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreRPCServer).ListPodNodes(ctx, req.(*ListNodesOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoreRPC_ListPodNodeNames_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListNodesOptions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreRPCServer).ListPodNodeNames(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.CoreRPC/ListPodNodeNames",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreRPCServer).ListPodNodeNames(ctx, req.(*ListNodesOptions))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoreRPC_GetContainer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContainerID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreRPCServer).GetContainer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.CoreRPC/GetContainer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreRPCServer).GetContainer(ctx, req.(*ContainerID))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoreRPC_GetContainers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContainerIDs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoreRPCServer).GetContainers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.CoreRPC/GetContainers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoreRPCServer).GetContainers(ctx, req.(*ContainerIDs))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoreRPC_BuildImage_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(BuildImageOptions)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CoreRPCServer).BuildImage(m, &coreRPCBuildImageServer{stream})
}

type CoreRPC_BuildImageServer interface {
	Send(*BuildImageMessage) error
	grpc.ServerStream
}

type coreRPCBuildImageServer struct {
	grpc.ServerStream
}

func (x *coreRPCBuildImageServer) Send(m *BuildImageMessage) error {
	return x.ServerStream.SendMsg(m)
}

func _CoreRPC_CreateContainer_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(DeployOptions)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CoreRPCServer).CreateContainer(m, &coreRPCCreateContainerServer{stream})
}

type CoreRPC_CreateContainerServer interface {
	Send(*CreateContainerMessage) error
	grpc.ServerStream
}

type coreRPCCreateContainerServer struct {
	grpc.ServerStream
}

func (x *coreRPCCreateContainerServer) Send(m *CreateContainerMessage) error {
	return x.ServerStream.SendMsg(m)
}

func _CoreRPC_UpgradeContainer_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(UpgradeOptions)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CoreRPCServer).UpgradeContainer(m, &coreRPCUpgradeContainerServer{stream})
}

type CoreRPC_UpgradeContainerServer interface {
	Send(*UpgradeContainerMessage) error
	grpc.ServerStream
}

type coreRPCUpgradeContainerServer struct {
	grpc.ServerStream
}

func (x *coreRPCUpgradeContainerServer) Send(m *UpgradeContainerMessage) error {
	return x.ServerStream.SendMsg(m)
}

func _CoreRPC_RemoveContainer_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ContainerIDs)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CoreRPCServer).RemoveContainer(m, &coreRPCRemoveContainerServer{stream})
}

type CoreRPC_RemoveContainerServer interface {
	Send(*RemoveContainerMessage) error
	grpc.ServerStream
}

type coreRPCRemoveContainerServer struct {
	grpc.ServerStream
}

func (x *coreRPCRemoveContainerServer) Send(m *RemoveContainerMessage) error {
	return x.ServerStream.SendMsg(m)
}

func _CoreRPC_RemoveImage_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(RemoveImageOptions)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CoreRPCServer).RemoveImage(m, &coreRPCRemoveImageServer{stream})
}

type CoreRPC_RemoveImageServer interface {
	Send(*RemoveImageMessage) error
	grpc.ServerStream
}

type coreRPCRemoveImageServer struct {
	grpc.ServerStream
}

func (x *coreRPCRemoveImageServer) Send(m *RemoveImageMessage) error {
	return x.ServerStream.SendMsg(m)
}

var _CoreRPC_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.CoreRPC",
	HandlerType: (*CoreRPCServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListPods",
			Handler:    _CoreRPC_ListPods_Handler,
		},
		{
			MethodName: "AddPod",
			Handler:    _CoreRPC_AddPod_Handler,
		},
		{
			MethodName: "GetPod",
			Handler:    _CoreRPC_GetPod_Handler,
		},
		{
			MethodName: "AddNode",
			Handler:    _CoreRPC_AddNode_Handler,
		},
		{
			MethodName: "GetNode",
			Handler:    _CoreRPC_GetNode_Handler,
		},
		{
			MethodName: "ListPodNodes",
			Handler:    _CoreRPC_ListPodNodes_Handler,
		},
		{
			MethodName: "ListPodNodeNames",
			Handler:    _CoreRPC_ListPodNodeNames_Handler,
		},
		{
			MethodName: "GetContainer",
			Handler:    _CoreRPC_GetContainer_Handler,
		},
		{
			MethodName: "GetContainers",
			Handler:    _CoreRPC_GetContainers_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "BuildImage",
			Handler:       _CoreRPC_BuildImage_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "CreateContainer",
			Handler:       _CoreRPC_CreateContainer_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "UpgradeContainer",
			Handler:       _CoreRPC_UpgradeContainer_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "RemoveContainer",
			Handler:       _CoreRPC_RemoveContainer_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "RemoveImage",
			Handler:       _CoreRPC_RemoveImage_Handler,
			ServerStreams: true,
		},
	},
	Metadata: fileDescriptor0,
}

func init() { proto.RegisterFile("core.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 1204 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x9c, 0x57, 0xdb, 0x4e, 0xe4, 0x46,
	0x13, 0xc6, 0xe3, 0xf1, 0x1c, 0x6a, 0x18, 0x96, 0x6d, 0xed, 0xf2, 0xfb, 0xf7, 0x2a, 0x1b, 0x68,
	0xa4, 0x84, 0x48, 0x59, 0xc4, 0xb2, 0xca, 0x11, 0x29, 0x11, 0x0b, 0x04, 0x21, 0x25, 0x84, 0x58,
	0xca, 0x5d, 0x24, 0x62, 0xec, 0x06, 0x59, 0xcc, 0xb8, 0x1d, 0xb7, 0xcd, 0x68, 0x9e, 0x21, 0x57,
	0x91, 0xf2, 0x12, 0x79, 0x93, 0xbc, 0x42, 0x5e, 0x24, 0xd7, 0x51, 0xf5, 0xc1, 0xd3, 0xf6, 0x0e,
	0x41, 0xe1, 0xae, 0xbf, 0xee, 0x72, 0x75, 0xd5, 0xd7, 0x5f, 0x57, 0xb5, 0x01, 0x62, 0x5e, 0xb0,
	0xdd, 0xbc, 0xe0, 0x25, 0x27, 0x9d, 0xfc, 0x8a, 0xf6, 0xc1, 0x3b, 0x99, 0xe6, 0xe5, 0x9c, 0xbe,
	0x02, 0xf7, 0x82, 0x27, 0x84, 0x40, 0x37, 0x8b, 0xa6, 0xcc, 0x77, 0x36, 0x9d, 0x9d, 0x61, 0x28,
	0xc7, 0x38, 0x97, 0x30, 0x11, 0xfb, 0x1d, 0x35, 0x87, 0x63, 0xba, 0x0d, 0xdd, 0x0b, 0x9e, 0x08,
	0xf2, 0x02, 0xba, 0x39, 0x4f, 0x84, 0xef, 0x6c, 0xba, 0x3b, 0xa3, 0xfd, 0xfe, 0x6e, 0x7e, 0xb5,
	0x7b, 0xc1, 0x93, 0x50, 0x4e, 0xd2, 0xbf, 0x1c, 0xe8, 0x9e, 0xf3, 0x84, 0x2d, 0xf5, 0x1a, 0xc0,
	0x80, 0x65, 0x49, 0xce, 0xd3, 0xac, 0xd4, 0x9e, 0x6b, 0x4c, 0x7c, 0xe8, 0xe7, 0x3c, 0x91, 0x9f,
	0xb8, 0x72, 0xc9, 0x40, 0xb2, 0x01, 0xbd, 0xbc, 0xba, 0x9a, 0xa4, 0xb1, 0xdf, 0xdd, 0x74, 0x76,
	0x06, 0xa1, 0x46, 0x64, 0x1b, 0xdc, 0x38, 0xaf, 0x7c, 0x4f, 0x86, 0xf1, 0x14, 0xc3, 0xc0, 0x8d,
	0x77, 0x8f, 0xf2, 0xea, 0x24, 0x2b, 0x8b, 0x79, 0x88, 0xab, 0x18, 0x46, 0x9a, 0x5d, 0x73, 0xbf,
	0xa7, 0xc2, 0xc0, 0x71, 0xf0, 0x29, 0x0c, 0x8c, 0x11, 0x59, 0x07, 0xf7, 0x96, 0xcd, 0x75, 0x94,
	0x38, 0x24, 0xcf, 0xc0, 0xbb, 0x8b, 0x26, 0x15, 0x93, 0x11, 0xba, 0xa1, 0x02, 0x5f, 0x76, 0x3e,
	0x77, 0xe8, 0x87, 0xe0, 0xe1, 0x0e, 0x82, 0xbc, 0x04, 0x2f, 0xc3, 0x81, 0xa6, 0x60, 0x60, 0xf6,
	0x0e, 0xd5, 0x34, 0xdd, 0x82, 0x21, 0xc2, 0xf3, 0x68, 0xca, 0x04, 0xfa, 0xc3, 0x34, 0x94, 0xf1,
	0x30, 0x54, 0x80, 0xce, 0x61, 0x78, 0xc4, 0xb3, 0x32, 0x4a, 0x33, 0x56, 0x90, 0x35, 0xe8, 0xa4,
	0x89, 0x8e, 0xa1, 0x93, 0x26, 0x36, 0x17, 0x9d, 0x26, 0x17, 0x01, 0x0c, 0x70, 0x0b, 0x8b, 0xa6,
	0x1a, 0xd7, 0x8c, 0x77, 0x9b, 0xe7, 0x28, 0xd3, 0xf7, 0x16, 0xe9, 0xd3, 0x03, 0x80, 0x7a, 0x6b,
	0x41, 0x5e, 0xa1, 0x3e, 0x0c, 0xd2, 0x09, 0x8d, 0x31, 0xa1, 0xda, 0x26, 0xb4, 0x0c, 0xe8, 0x7b,
	0x30, 0xaa, 0x17, 0xce, 0x8e, 0xdb, 0x91, 0xd3, 0xd7, 0xb0, 0x6a, 0x2d, 0x0b, 0xb2, 0x05, 0x6e,
	0x5a, 0x4b, 0xe5, 0x49, 0xc3, 0xed, 0xd9, 0x71, 0x88, 0x6b, 0xf4, 0x33, 0x18, 0x1f, 0x26, 0xc9,
	0x05, 0x4f, 0xbe, 0xcf, 0xcb, 0x94, 0x67, 0xe2, 0x3f, 0xe8, 0x71, 0x7c, 0xca, 0xca, 0x7f, 0xff,
	0x90, 0xfe, 0xe9, 0xc0, 0xda, 0x61, 0x92, 0xe0, 0x71, 0x18, 0x33, 0x9b, 0x43, 0xa7, 0xc5, 0xe1,
	0xa3, 0x15, 0x1a, 0x47, 0xd7, 0xe9, 0xc4, 0x70, 0xaf, 0x11, 0x7a, 0x8b, 0x59, 0x51, 0xca, 0x15,
	0x75, 0x02, 0x35, 0x46, 0x6f, 0xb7, 0x6c, 0x2e, 0x97, 0x94, 0x36, 0x0d, 0xb4, 0xf4, 0xde, 0xb7,
	0xf5, 0x4e, 0xbf, 0x81, 0xb5, 0x53, 0x56, 0xda, 0x99, 0x58, 0x11, 0x39, 0xf7, 0xeb, 0xa4, 0xd3,
	0xcc, 0x91, 0x7e, 0x0c, 0xeb, 0xdf, 0xa6, 0x42, 0x3a, 0x12, 0x0f, 0x7a, 0xa2, 0x1c, 0x9e, 0xbe,
	0xad, 0xd2, 0x49, 0x72, 0x36, 0x8d, 0x6e, 0x98, 0xc5, 0x74, 0xc1, 0x72, 0x6e, 0x98, 0xc6, 0x31,
	0xba, 0xb8, 0x63, 0x85, 0x48, 0x79, 0x66, 0x44, 0xab, 0x21, 0xde, 0xb1, 0x2a, 0x4d, 0x34, 0x69,
	0x38, 0xc4, 0xf0, 0xa2, 0xa2, 0x4c, 0xaf, 0xa3, 0xb8, 0xd4, 0x94, 0xd5, 0x98, 0xfe, 0xee, 0xc2,
	0xf8, 0x98, 0xe5, 0x13, 0x3e, 0x37, 0xbb, 0x3d, 0x03, 0x4f, 0xe4, 0x2c, 0x16, 0x7a, 0x3b, 0x05,
	0x70, 0xbf, 0x28, 0xcf, 0xed, 0x4b, 0xa2, 0x21, 0xda, 0xa7, 0x18, 0xad, 0xde, 0x51, 0x01, 0x3b,
	0xc5, 0xee, 0xfd, 0x64, 0x79, 0x2d, 0x41, 0xbc, 0x04, 0x60, 0x58, 0x28, 0x94, 0x24, 0xd4, 0x49,
	0x59, 0x33, 0xe4, 0x05, 0x0c, 0xe3, 0xbc, 0xba, 0xfc, 0xa5, 0xe2, 0x65, 0x24, 0xcf, 0xcb, 0x09,
	0x07, 0x71, 0x5e, 0xfd, 0x80, 0x18, 0x03, 0x89, 0x79, 0x95, 0x95, 0xfe, 0x60, 0xd3, 0xd9, 0xf1,
	0x42, 0x05, 0xf0, 0x7c, 0xa7, 0x6c, 0xca, 0x8b, 0xb9, 0x3f, 0x94, 0x15, 0x46, 0x23, 0xa4, 0x89,
	0x65, 0x77, 0x3e, 0xc8, 0x32, 0x81, 0x43, 0x72, 0x00, 0x83, 0x8c, 0x95, 0x33, 0x5e, 0xdc, 0x0a,
	0x7f, 0x24, 0xaf, 0xd0, 0xfb, 0x78, 0x85, 0x1a, 0xec, 0xec, 0x9e, 0x6b, 0x0b, 0x55, 0xf4, 0xea,
	0x0f, 0xd0, 0x5d, 0x11, 0xcd, 0xfc, 0x55, 0xa9, 0x21, 0x1c, 0x06, 0x07, 0x30, 0x6e, 0x18, 0x3f,
	0x54, 0xfc, 0x86, 0x76, 0xf1, 0x3b, 0x83, 0xb5, 0x1f, 0xf3, 0x9b, 0x22, 0x5a, 0xa8, 0xef, 0xe1,
	0xbb, 0xbd, 0x38, 0x89, 0x8e, 0x75, 0x12, 0xf4, 0x0a, 0x48, 0xc8, 0xa6, 0xfc, 0x8e, 0x35, 0x34,
	0xf5, 0x28, 0x31, 0x23, 0x99, 0xd2, 0xa9, 0xf0, 0x5d, 0xc9, 0x9b, 0x46, 0xf4, 0x00, 0x46, 0x27,
	0x45, 0xc1, 0x8b, 0x63, 0x56, 0x46, 0xe9, 0x04, 0x05, 0x1b, 0xf3, 0x44, 0x79, 0x76, 0x43, 0x39,
	0xc6, 0x0d, 0xa7, 0x4c, 0x88, 0x45, 0x78, 0x06, 0xd2, 0x3f, 0x1c, 0x5b, 0xf4, 0xdf, 0xa9, 0x59,
	0xdc, 0x4a, 0x94, 0x51, 0x59, 0x19, 0x1d, 0x6a, 0x84, 0xe1, 0xe5, 0x05, 0xbf, 0x29, 0x98, 0x10,
	0x26, 0x3c, 0x83, 0x91, 0x00, 0x86, 0x61, 0x18, 0x29, 0x4a, 0xa0, 0x3c, 0x15, 0x2c, 0x9a, 0x9a,
	0x7a, 0xa1, 0x10, 0xd9, 0x87, 0x55, 0x69, 0x70, 0x99, 0xc8, 0xa8, 0xa5, 0x18, 0x35, 0xb5, 0x56,
	0x32, 0xe1, 0x88, 0x2d, 0x00, 0xfd, 0xad, 0x03, 0x1b, 0x47, 0x05, 0x8b, 0x4a, 0x56, 0xb3, 0x6f,
	0x02, 0x7e, 0x1c, 0xa3, 0xaa, 0xa4, 0xbb, 0x75, 0x33, 0x5a, 0xd6, 0x56, 0xea, 0xb4, 0x3c, 0x3b,
	0x2d, 0x1f, 0xfa, 0xa2, 0x8a, 0x63, 0xe4, 0xa1, 0x27, 0x55, 0x67, 0x20, 0xf9, 0x44, 0xb5, 0xea,
	0xbe, 0x94, 0xca, 0xb6, 0x94, 0xca, 0xd2, 0x90, 0x9b, 0xcd, 0xfb, 0xd1, 0x8d, 0xfa, 0xe7, 0x86,
	0xc0, 0x0c, 0x1d, 0xb5, 0x18, 0x9d, 0x56, 0x59, 0x30, 0x41, 0x77, 0x9a, 0x41, 0x07, 0x30, 0xd0,
	0x82, 0x30, 0xe2, 0xaa, 0x31, 0xfd, 0x09, 0x36, 0xd4, 0x0e, 0xef, 0x90, 0xbe, 0xa4, 0x97, 0xdf,
	0xe3, 0xdf, 0xd2, 0x9f, 0xdb, 0xd4, 0xdf, 0xaf, 0x0e, 0xfc, 0x4f, 0x5f, 0xb6, 0x07, 0xfd, 0x3f,
	0x87, 0x5e, 0xc6, 0x66, 0x97, 0x69, 0x62, 0xee, 0x58, 0xc6, 0x66, 0x67, 0x09, 0xf9, 0x3f, 0x96,
	0x8e, 0xd9, 0xa5, 0xdd, 0xad, 0x32, 0x36, 0x3b, 0x6f, 0x1c, 0x5e, 0xf7, 0x9e, 0xc3, 0xf3, 0x1a,
	0x71, 0xee, 0xff, 0xed, 0x41, 0xff, 0x88, 0x17, 0x2c, 0xbc, 0x38, 0x22, 0x5b, 0x30, 0xc0, 0xde,
	0x21, 0xdf, 0x81, 0x43, 0xa9, 0x4b, 0x7c, 0x49, 0x06, 0x03, 0xfd, 0x08, 0x14, 0x74, 0x85, 0x7c,
	0x00, 0x3d, 0xd5, 0xcf, 0x89, 0x7c, 0x93, 0x35, 0x7a, 0x7b, 0x60, 0x5e, 0x8b, 0xca, 0x4e, 0xb5,
	0x6f, 0x65, 0xd7, 0x68, 0xe5, 0xb6, 0xdd, 0x47, 0xd0, 0xd7, 0x0d, 0x9c, 0x10, 0xed, 0xd0, 0xea,
	0x81, 0x41, 0xfd, 0xf8, 0x52, 0xa6, 0xba, 0x43, 0x2a, 0xd3, 0x66, 0xbb, 0x6c, 0x98, 0xbe, 0x86,
	0x55, 0x9d, 0x88, 0x7a, 0xd2, 0x3d, 0xc3, 0xb5, 0x76, 0x5b, 0x0c, 0x86, 0xe6, 0x0b, 0x4c, 0xec,
	0x0b, 0xd5, 0x37, 0xf5, 0x27, 0xfa, 0x71, 0xb7, 0xf4, 0xb3, 0xb1, 0xf9, 0x4c, 0x1a, 0xd1, 0x15,
	0xb2, 0x07, 0xab, 0xa7, 0xac, 0x5c, 0x3c, 0xf8, 0xda, 0xd5, 0x32, 0x68, 0xbe, 0xb8, 0xe8, 0x0a,
	0x79, 0x23, 0x1f, 0x37, 0xd6, 0x3b, 0x6d, 0xbd, 0xf5, 0x89, 0x08, 0xd6, 0x1a, 0x33, 0xb8, 0xcd,
	0x57, 0x00, 0x8b, 0xb2, 0x45, 0x9e, 0xe3, 0xfa, 0x3b, 0xbd, 0x3b, 0x68, 0x4d, 0x6b, 0x5d, 0xd1,
	0x95, 0x3d, 0x87, 0xbc, 0x85, 0x27, 0xad, 0x7b, 0xa9, 0xce, 0xa6, 0xd1, 0x70, 0x82, 0xe0, 0xfe,
	0xfb, 0xbb, 0xe7, 0x90, 0x13, 0x58, 0x6f, 0x4b, 0x57, 0x1d, 0x46, 0xb3, 0x7b, 0x04, 0x2f, 0xac,
	0xb9, 0x25, 0x6e, 0x0e, 0xe1, 0x49, 0xeb, 0x82, 0x2d, 0x61, 0x40, 0x46, 0xb2, 0xfc, 0x1e, 0xee,
	0x39, 0xe4, 0x6b, 0x18, 0x59, 0x55, 0x80, 0x6c, 0x2c, 0x8c, 0x1b, 0x7c, 0xb4, 0xe7, 0x6b, 0x07,
	0x57, 0x3d, 0xf9, 0xcf, 0xf4, 0xe6, 0x9f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x40, 0x8d, 0x66, 0x53,
	0x41, 0x0d, 0x00, 0x00,
}
